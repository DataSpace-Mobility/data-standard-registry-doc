{"version":3,"sources":["components/DocPage/logo.svg","components/DocPage/DocTable.jsx","components/DocPage/GraphView.jsx","components/DocPage/DocPage.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","DocTable","props","standardFileJSONArr","renderMessageTable","obj","key","fullName","id","className","name","description","scope","width","fields","res","forEach","f","idx","typeLink","type","repeated","toUpperCase","href","fullType","label","push","parseMessageRows","renderEnumTable","number","parseEnumRows","values","file","i","messages","length","enums","renderAllTables","GraphView","feedMsgFullName","parseAsTree","objMap","data","processNode","nodeType","nodeName","console","log","indexOf","children","field","value","nName","undefined","svg","d3","append","attr","root","d3Hierarchy","dx","dy","height","nodeSize","cluster","selectAll","links","join","d","target","y","x","source","descendants","text","filter","clone","lower","useEffect","StandardJSON","files","DocPage","observer","IntersectionObserver","elems","elemsWithIds","document","querySelectorAll","elem","observe","src","Logo","alt","TextField","variant","size","InputLabelProps","style","fontSize","msg","parseContentList","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ca93f35e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.eb2716e9.svg\";","import React from 'react';\n\nimport './DocTable.scss';\n\nfunction DocTable(props) {\n\n    let standardFileJSONArr = props.standardFileJSONArr\n\n    function parseMessageRows(fields) {\n        let res = []\n       fields.forEach((f, idx) => {\n           let typeLink = f.type\n           let repeated = ''\n           if(f.type[0] === f.type[0].toUpperCase()) {\n               typeLink = <a href={\"#\" + f.fullType}>{f.type}</a>\n           }\n           if(f.label === 'repeated') {\n               repeated = '[ ] '\n           }\n           res.push(\n               <tr key={idx}>\n                    <td className=\"field-name\">{f.name}</td>\n                    <td>{repeated}{typeLink}</td>\n                    <td>{f.description}</td>\n                </tr>\n           )\n       })\n       return res\n    }\n\n    function renderMessageTable(obj) {\n        return(\n            <div key={obj.fullName} id={obj.fullName} className=\"msg-table\">\n                <div className=\"msg-name-box\">\n                    <span className=\"msg-name\">{obj.name}</span>\n                </div>\n                <p className=\"msg-description\">{obj.description}</p>\n                <table className=\"table\">\n                    <thead className=\"header\">\n                        <tr>\n                        <th scope=\"col\" width=\"10%\">Field Name</th>\n                        <th scope=\"col\" width=\"20%\">Type</th>\n                        <th scope=\"col\">Description</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {parseMessageRows(obj.fields)}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n\n    function renderEnumTable(obj) {\n        return(\n            <div key={obj.fullName} id={obj.fullName} className=\"msg-table\">\n                <div className=\"msg-name-box\">\n                    <span className=\"msg-name\">{obj.name}</span>\n                </div>\n                <p className=\"msg-description\">{obj.description}</p>\n                <table className=\"table\">\n                    <thead className=\"header\">\n                        <tr>\n                        <th scope=\"col\" width=\"10%\">Number</th>\n                        <th scope=\"col\" width=\"10%\">Value</th>\n                        <th scope=\"col\">Description</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {parseEnumRows(obj.values)}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n\n    function parseEnumRows(fields) {\n        let res = []\n       fields.forEach((f, idx) => {\n           res.push(\n               <tr key={idx}>\n                    <td className=\"field-name\">{f.number}</td>\n                    <td>{f.name}</td>\n                    <td>{f.description}</td>\n                </tr>\n           )\n       })\n       return res\n    }\n\n    function renderAllTables() {\n        let res = []\n        standardFileJSONArr.forEach(file => {\n            for(let i=0; i<file.messages.length; i++) {\n                res.push(renderMessageTable(file.messages[i]))\n            }\n        })\n\n        standardFileJSONArr.forEach(file => {\n            for(let i=0; i<file.enums.length; i++) {\n                res.push(renderEnumTable(file.enums[i]))\n            }\n        })\n\n        return res\n    }\n\n    return(\n        <section className=\"DocTable\">\n            {renderAllTables()}\n        </section>\n    )\n}\n\nexport default DocTable;\n","import React, { useEffect } from 'react';\nimport * as d3Hierarchy from 'd3-hierarchy';\nimport * as d3 from 'd3';\n\nfunction GraphView(props) {\n\n    let feedMsgFullName = ''\n\n    function processNode(objMap, nodeType, nodeName) {\n        console.log(nodeType)\n        console.log(objMap)\n        let obj = objMap[nodeType]\n        if(nodeType.indexOf('.') === -1) {\n            return {\n                name: nodeType + ': ' + (nodeName || '')\n            }\n        }\n\n        let children = []\n        if('fields' in obj) {\n            \n            obj.fields.forEach(field => {\n                children.push(processNode(objMap, field.fullType, field.name))\n            })\n            \n        } else {\n            obj.values.forEach(value => {\n                children.push({\n                    name: value.name\n                })\n            })\n        }\n        console.log(nodeType)\n\n        let nName = ''\n        if(nodeName != undefined) {\n            nName = ': ' + nodeName\n        }\n        \n        return {\n            name: obj.name + nName,\n            children: children\n        }\n    }\n\n    function parseAsTree(standardFileJSONArr) {\n        let objMap = {}\n        standardFileJSONArr.forEach(file => {\n            for(let i=0; i<file.messages.length; i++) {\n                objMap[file.messages[i].fullName] = file.messages[i]\n\n                if(file.messages[i].name == 'FeedMessage') {\n                    feedMsgFullName = file.messages[i].fullName\n                }\n            }\n        })\n\n        standardFileJSONArr.forEach(file => {\n            for(let i=0; i<file.enums.length; i++) {\n                objMap[file.enums[i].fullName] = file.enums[i]\n            }\n        })\n        \n        \n        let data = processNode(objMap, feedMsgFullName, undefined)\n\n        var width = 900\n        var height = 2800\n\n        var svg = d3.select('#tree-container')\n            .append('svg')\n                .attr('width', width)\n                .attr('height', height)\n            .append('g')\n                .attr(\"transform\", \"translate(90, 400)\");\n\n        const root = d3Hierarchy.hierarchy(data)\n\n        root.dx = 13;\n        root.dy = width / (root.height + 2);\n\n        var cluster = d3Hierarchy.cluster().nodeSize([root.dx, root.dy])\n\n        cluster(root)\n\n        svg.append(\"g\")\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"#555\")\n            .attr(\"stroke-opacity\", 0.4)\n            .attr(\"stroke-width\", 1.5)\n        .selectAll(\"path\")\n            .data(root.links())\n            .join(\"path\")\n            .attr(\"d\", d => `\n                M${d.target.y},${d.target.x}\n                C${d.source.y + root.dy / 2},${d.target.x}\n                ${d.source.y + root.dy / 2},${d.source.x}\n                ${d.source.y},${d.source.x}\n            `);\n\n        svg.append(\"g\")\n            .selectAll(\"circle\")\n            .data(root.descendants())\n            .join(\"circle\")\n            .attr(\"cx\", d => d.y)\n            .attr(\"cy\", d => d.x)\n            .attr(\"fill\", d => d.children ? \"#555\" : \"#999\")\n            .attr(\"r\", 2.5);\n\n        svg.append(\"g\")\n            .attr(\"font-family\", \"sans-serif\")\n            .attr(\"font-size\", 8)\n            .attr(\"stroke-linejoin\", \"round\")\n            .attr(\"stroke-width\", 3)\n            .selectAll(\"text\")\n            .data(root.descendants())\n            .join(\"text\")\n            .attr(\"x\", d => d.y)\n            .attr(\"y\", d => d.x)\n            .attr(\"dy\", d => d.children ? \"1.51em\" : \"0.31em\")\n            .attr(\"dx\", d => d.children ? 8 : 6)\n            .text(d => d.data.name)\n            .filter(d => d.children)\n            .attr(\"text-anchor\", \"end\")\n            .clone(true).lower()\n            .attr(\"stroke\", \"white\");\n\n            svg.attr(\"viewBox\", 0, 0, width, height)\n\n\n    }\n\n    function drawTree() {\n        \n    }\n\n    useEffect(() => {\n        console.log(d3)\n        parseAsTree(props.StandardJSON.files)\n    }, [props])\n\n    return(\n        <section className=\"GraphView\">\n            <div id=\"tree-container\"></div>\n        </section>\n    )\n}\n\nexport default GraphView;","import React, { useEffect } from 'react';\nimport TextField from '@material-ui/core/TextField';\n\nimport DocTable from './DocTable';\nimport GraphView from './GraphView';\n\nimport Logo from './logo.svg'\n\nimport './DocPage.scss';\nimport './DocSearch.scss';\nimport './DocContentList.scss';\n\n// Temp import\nimport StandardJSON from './afcs.json'\n\nfunction DocPage() {\n\n    function parseContentList() {\n        let res = []\n        StandardJSON.files.forEach(f => {\n            f.messages.forEach((msg, idx) => {\n                res.push(\n                    <a key={idx} href={\"#\" + msg.fullName}><li>{msg.name}</li></a>\n                )\n            })\n        })\n\n        StandardJSON.files.forEach(f => {\n            f.enums.forEach((msg, idx) => {\n                res.push(\n                    <a key={idx + 100} href={\"#\" + msg.fullName}><li>{msg.name}</li></a>\n                )\n            })\n        })\n        \n        return res\n    }\n\n    useEffect(() => {\n        const observer = new IntersectionObserver(elems => {\n            console.log(elems)\n        });\n        const elemsWithIds = document.querySelectorAll(\"*[id] .msg-table\");\n        console.log(elemsWithIds)\n        elemsWithIds.forEach(elem => observer.observe(elem));\n    }, [])\n\n    \n\n    /* window.addEventListener('scroll', onScroll)\n    function onScroll(event){\n        //console.log(event)\n        \n        console.log(document.querySelectorAll('*[id]'))\n    } */\n\n    return(\n        <section className=\"DocPage\">\n            <div className=\"container-fluid nopadding full-width-height\">\n                <div className=\"row nopadding full-width-height\">\n                    <div className=\"col-2 nopadding\">\n                        <section className=\"DocSearch\">\n                            <div className=\"logo-div\">\n                                <img src={Logo} alt=\"Logo\"/>\n                            </div>\n                            <TextField\n                                label=\"Search Data Standards\"\n                                id=\"outlined-start-adornment\"\n                                className=\"doc-search\"\n                                variant=\"outlined\"\n                                size=\"small\"\n                                InputLabelProps={{ style: \n                                    { fontSize: \"1em\" } \n                                }}\n                            />\n                        </section>\n                    </div>\n                    <div className=\"col-8 nopadding\">\n                        <div className=\"nav-path\">Data Standards > Transit > GTFS</div>\n                        <div className=\"standard-description\">\n                            <h1>General Transit Feed Specification</h1>\n                            <h5>\n                                The General Transit Feed Specification (GTFS), also known as GTFS static or static transit to differentiate it from the GTFS realtime extension, defines a common format for public transportation schedules and associated geographic information. GTFS \"feeds\" let public transit agencies publish their transit data and developers write applications that consume that data in an interoperable way.\n                            </h5>\n                        </div>\n                        <DocTable standardFileJSONArr={StandardJSON.files}/>\n                        <GraphView StandardJSON={StandardJSON}/>\n                    </div>\n                    <div className=\"col-2 nopadding\">\n                        <section className=\"DocContentList\">\n                            <ul>\n                                {parseContentList()}\n                            </ul>\n                        </section>\n                    </div>\n                </div>\n            </div>\n            \n        </section>\n    )\n}\n\nexport default DocPage;","import React from 'react';\n\nimport DocPage from './components/DocPage/DocPage'\n\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        \n      </header>\n      <DocPage/>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}